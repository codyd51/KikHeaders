/*
 * This header is generated by weak_classdump 0.2
 * on Saturday, July 5, 2014 at 1:14:50 AM Mountain Daylight Time
 * Operating System: Version 7.1.1 (Build 11D201)
 * weak_classdump is Freeware by Elias Limneos.
 *
 */

#import "RetryStrategyDelegate.h"
#import "XmppStreamDelegate.h"
#import "KikStanzaManagerDelegate.h"
 #import "KikStanzaManager.h"
 #import "XMPPJID.h"
 #import "AuthorizationHandler.h"
 #import "ThrottledExponentialBackoffRetryStrategy.h"
 #import "XmppStream2.h"
 #import "NetworkTime.h"
 #import "Config.h"
 #import "KikCredentials.h"
 #import "Reachability.h"

@interface KikNetwork : NSObject <RetryStrategyDelegate, XmppStreamDelegate, KikStanzaManagerDelegate> {
	KikStanzaManager* _stanzaManager; 
	NSString* _host; 
	NSString* _domain; 
	XMPPJID* _jid; 
	NSString* _password; 
	NSString* _resource; 
	BOOL _anonymous; 
	NSString* _username; 
	BOOL _streamInit; 
	int _connectionAttempts; 
	id<AuthorizationHandler> _authorizationHandler; 
	ThrottledExponentialBackoffRetryStrategy* _retryStrategy; 
	XmppStream2* _xmppStream; 
	NetworkTime* _networkTime; 
	NSTimer* _pingTimer; 
	BOOL _isConnected; 
	int _connectionNumber; 
	Config* _config; 
	NSMutableData* _cachedStanzaData; 
	Config* _redirectConfig; 
	NSDate* _redirectTimeout; 
	NSDate* _lastLimitResetTime; 
	int _limitedConnectionAttempts; 
	BOOL _pongReceived; 
	BOOL _kik56EncryptionFailed; 
	BOOL _connecting; 
	BOOL _shutdown; 
	NSObject* _connectionLock; 
	NSTimer* _killConnectionTimer; 
	KikCredentials* _credentials; 
	NSData* _token; 
	Reachability* _reachability; 
	BOOL _shouldTryFailoverPort; 
}
@property (assign,nonatomic) BOOL isConnected; 
@property (nonatomic,copy) KikCredentials* credentials; 				//@synthesize credentials=_credentials - In the implementation block
@property (assign,nonatomic) BOOL shouldTryFailoverPort; 				//@synthesize shouldTryFailoverPort=_shouldTryFailoverPort - In the implementation block
-(void)authorize:(id)arg1;
-(id)networkTime;
-(void)sendXmppStanza:(id)arg1;
-(void)checkConnectionLiveliness;
-(void)onPasswordChanged:(id)arg1;
-(void)checkConnectionLiveliness:(double)arg1;
-(void)dieOnPingFailure:(id)arg1;
-(void)sendPing;
-(void)clearAllStanzas;
-(void)doConnect;
-(void)unregisterFromNetworkChangeNotifications;
-(void)registerForNetworkChangeNotifications;
-(void)requestConnection;
-(void)onDisconnected;
-(void)reschedulePing;
-(void)requestConnection:(BOOL)arg1;
-(void)executePing;
-(void)handleNetworkChange:(id)arg1;
-(void)handleCurrentNetworkStatus;
-(void)onConnected:(id)arg1 withStreamID:(id)arg2 andSocketBindTime:(double)arg3;
-(void)handleStreamOpenFailure:(id)arg1;
-(void)authorizationRevoked;
-(void)setShouldTryFailoverPort:(BOOL)arg1;
-(void)onPongReceived;
-(void)retryStrategyDidAdviseRetry:(id)arg1;
-(void)xmppStream:(id)arg1 didReceiveError:(id)arg2;
-(void)xmppStream:(id)arg1 didReceiveXml:(id)arg2;
-(void)xmppStreamDidWriteData:(id)arg1;
-(id)stanzasReadyToSend:(id)arg1;
-(void)stanzaTimedOut;
-(id)initWithConfig:(id)arg1 authorizationHandler:(id)arg2 token:(id)arg3 storage:(id)arg4;
-(void)dealloc;
-(void)connect;
-(void)disconnect:(id)arg1;
@end