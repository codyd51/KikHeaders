/*
 * This header is generated by weak_classdump 0.2
 * on Friday, July 4, 2014 at 12:01:49 AM Mountain Daylight Time
 * Operating System: Version 7.1.1 (Build 11D201)
 * weak_classdump is Freeware by Elias Limneos.
 *
 */


@protocol UIAlertViewDelegate
@optional
-(void)alertView(id):arg1 clickedButtonAtIndex(int):arg2 ;
-(void)alertView(id):arg1 didDismissWithButtonIndex(int):arg2 ;
-(void)alertViewCancel(id):arg1 ;
-(BOOL)alertViewShouldEnableFirstOtherButton(id):arg1 ;
-(void)didPresentAlertView(id):arg1 ;
-(void)willPresentAlertView(id):arg1 ;
-(void)alertView(id):arg1 willDismissWithButtonIndex(int):arg2 ;
@end

@protocol BrowserImplementation
@required
-(int)pageMode;
-(BOOL)obscuredByPopup;
-(void)setAutomationAsynchronousOutput(id):arg1 ;
-(void)setStatusBarHidden(BOOL):arg1 transparent(BOOL):arg2 isLight(BOOL):arg3 ;
-(BOOL)canShowPopupCardWithURL(id):arg1 ;
-(void)showSidebar;
-(int)orientationLock;
-(void)setOrientationLock(int):arg1 ;
-(void)performHttpsUpgradeForCardURL(id):arg1 ;
-(void)performRefreshClearingCache(BOOL):arg1 ;
-(void)pageFailed;
-(void)setPageMode(int):arg1 ;
-(void)navigateToUrl(id):arg1 title(id):arg2 icon(id):arg3 clearHistory(BOOL):arg4 ;
-(void)navigateToUrl(id):arg1 requestData(id):arg2 callback(id):arg3 ;
-(void)openExternalUrl(id):arg1 ;
-(void)openWindowWithUrl(id):arg1 callbackPath(id):arg2 callback(id):arg3 ;
-(void)showLoadingSpinner(BOOL):arg1 ;
-(void)pageReady;
-(id)currentUrl;
-(BOOL)isPopup;
-(void)setBrowserViewMode(int):arg1 ;
-(int)browserViewMode;
-(void)closePopup;
-(void)openURL(id):arg1 inPopup(BOOL):arg2 ;
-(void)updateCardTitle(id):arg1 andIconUrl(id):arg2 andMediaTrayIconUrl(id):arg3 andPrivacyPolicy(id):arg4 andTermsOfService(id):arg5 ;
-(void)updateAnonymousPublicKey(id):arg1 privateKey(id):arg2 ;
-(void)stopLoading;
-(int)pageMode;
-(BOOL)obscuredByPopup;
-(void)setAutomationAsynchronousOutput(id):arg1 ;
-(void)setStatusBarHidden(BOOL):arg1 transparent(BOOL):arg2 isLight(BOOL):arg3 ;
-(BOOL)canShowPopupCardWithURL(id):arg1 ;
-(void)showSidebar;
-(int)orientationLock;
-(void)setOrientationLock(int):arg1 ;
-(void)performHttpsUpgradeForCardURL(id):arg1 ;
-(void)performRefreshClearingCache(BOOL):arg1 ;
-(void)pageFailed;
-(void)setPageMode(int):arg1 ;
-(void)navigateToUrl(id):arg1 title(id):arg2 icon(id):arg3 clearHistory(BOOL):arg4 ;
-(void)navigateToUrl(id):arg1 requestData(id):arg2 callback(id):arg3 ;
-(void)openExternalUrl(id):arg1 ;
-(void)openWindowWithUrl(id):arg1 callbackPath(id):arg2 callback(id):arg3 ;
-(void)showLoadingSpinner(BOOL):arg1 ;
-(void)pageReady;
-(id)currentUrl;
-(BOOL)isPopup;
-(void)setBrowserViewMode(int):arg1 ;
-(int)browserViewMode;
-(void)closePopup;
-(void)openURL(id):arg1 inPopup(BOOL):arg2 ;
-(void)updateCardTitle(id):arg1 andIconUrl(id):arg2 andMediaTrayIconUrl(id):arg3 andPrivacyPolicy(id):arg4 andTermsOfService(id):arg5 ;
-(void)updateAnonymousPublicKey(id):arg1 privateKey(id):arg2 ;
-(void)stopLoading;
@end

@protocol KikImplementation
@required
-(void)sendKikMessage(id):arg1 toConversation(id):arg2 withReturnToSender(BOOL):arg3 ;
-(void)sendKikMessage(id):arg1 toUser(id):arg2 withReturnToSender(BOOL):arg3 ;
-(void)openConversation(id):arg1 withReturnToSender(BOOL):arg2 ;
-(void)openConversationWithUser(id):arg1 withCallback(id):arg2 ;
-(void)pickUsers(id):arg1 preselectedUsers(?):arg2 minSelect(id):arg3 maxSelect(int):arg4 ;
-(void)pickFilteredUsers(id):arg1 filtered(?):arg2 filterSelf(id):arg3 minSelect(BOOL):arg4 maxSelect(int):arg5 ;
-(void)sendKikMessage(id):arg1 toConversation(id):arg2 withReturnToSender(BOOL):arg3 ;
-(void)sendKikMessage(id):arg1 toUser(id):arg2 withReturnToSender(BOOL):arg3 ;
-(void)openConversation(id):arg1 withReturnToSender(BOOL):arg2 ;
-(void)openConversationWithUser(id):arg1 withCallback(id):arg2 ;
-(void)pickUsers(id):arg1 preselectedUsers(?):arg2 minSelect(id):arg3 maxSelect(int):arg4 ;
-(void)pickFilteredUsers(id):arg1 filtered(?):arg2 filterSelf(id):arg3 minSelect(BOOL):arg4 maxSelect(int):arg5 ;
@end

@protocol CardDescriptionProvider
@required
+(id)iconForCardWithURL(id):arg1 fromCardManager(id):arg2 ;
-(id)anonymousPublicKey;
-(id)anonymousPrivateKey;
-(BOOL)isCardSecure;
-(id)titleForCardWithURL(id):arg1 ;
-(id)iconUrlForCardWithURL(id):arg1 ;
-(id)iconForCardWithURL(id):arg1 ;
-(BOOL)isCardTrusted;
-(BOOL)isCardDebugMode;
-(id)cardUrl;
-(id)anonymousPublicKey;
-(id)anonymousPrivateKey;
-(BOOL)isCardSecure;
-(id)titleForCardWithURL(id):arg1 ;
-(id)iconUrlForCardWithURL(id):arg1 ;
-(id)iconForCardWithURL(id):arg1 ;
-(BOOL)isCardTrusted;
-(BOOL)isCardDebugMode;
-(id)cardUrl;
@end

@protocol ConversationPickerDelegate
@optional
-(void)chatSelected(id):arg1 ;
-(void)chatSelected(id):arg1 inController(id):arg2 ;
-(void)didViewInitialPickerScreen;
-(void)didCancel;
@end

@protocol PermissionsProvider
@required
-(BOOL)checkPermissions(id):arg1 ;
-(void)requestPermissions(id):arg1 callback(id):arg2 ;
-(BOOL)checkPermissions(id):arg1 ;
-(void)requestPermissions(id):arg1 callback(id):arg2 ;
@end
