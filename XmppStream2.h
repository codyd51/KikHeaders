/*
 * This header is generated by weak_classdump 0.2
 * on Saturday, July 5, 2014 at 1:14:09 PM Mountain Daylight Time
 * Operating System: Version 7.1.1 (Build 11D201)
 * weak_classdump is Freeware by Elias Limneos.
 *
 */

#import "GCDAsyncSocketDelegate.h"
#import "XMPPParserDelegate.h"
 #import "Config.h"
 #import "KikCredentials.h"
 #import "XMPPParser.h"
 #import "NetworkTime.h"
 //#import "GCDAsyncSocket.h"
 #import "ThreadSafeTimer.h"
 #import "OS_dispatch_queue.h"
  #import "OS_dispatch_object.h"

 @interface GCDAsyncSocket : NSObject
 @end

@interface XmppStream2 : NSObject <GCDAsyncSocketDelegate, XMPPParserDelegate> {
	Config* _config; 
	KikCredentials* _credentials; 
	id<XmppStreamDelegate> _delegate; 
	BOOL _streamInitError; 
	NSData* _secretKey; 
	XMPPParser* _parser; 
	int _connectionNumber; 
	NetworkTime* _networkTime; 
	//NSObject<OS_dispatch_queue>* _dispatchQueue; 
	GCDAsyncSocket* _socket; 
	id _delegateCallback; 
	NSObject* _callbackLock; 
	ThreadSafeTimer* _connectTimeoutTimer; 
	NSMutableDictionary* _writeCallbacks; 
	NSMutableDictionary* _readCallbacks; 
	NSString* _streamID; 
	id _connectionCallback; 
}
@property (nonatomic) unsigned short defaultPort; 
@property (nonatomic) unsigned short failoverPort; 
@property (nonatomic,retain) id<XmppStreamDelegate> delegate; 				//@synthesize delegate=_delegate - In the implementation block
@property (nonatomic,copy) id connectionCallback; 				//@synthesize connectionCallback=_connectionCallback - In the implementation block
-(void)xmppParser:(id)arg1 didFail:(id)arg2;
-(void)xmppParser:(id)arg1 didReadElement:(id)arg2;
-(void)xmppParser:(id)arg1 didReadRoot:(id)arg2;
-(void)onPasswordChanged:(id)arg1;
-(id)initWithConfig:(id)arg1 credentials:(id)arg2 secretKey:(id)arg3 networkTime:(id)arg4 connectionNumber:(int)arg5;
-(void)connect:(id)arg1 useFailoverPort:(BOOL)arg2;
-(void)socketFailedToBind;
-(void)writeStreamHeaders;
-(id)streamInitFrom:(id)arg1 sha1Password:(id)arg2 deviceId:(id)arg3 version:(id)arg4 language:(id)arg5 connectionAttempts:(int)arg6 verificationToken:(id)arg7 timestamp:(unsigned long long)arg8 streamID:(id)arg9;
-(void)connectedToServer;
-(void)streamInitRespondedTimestamp:(id)arg1 error:(id)arg2;
-(id)redirectErrorDetailsForElement:(id)arg1;
-(id)waitErrorDetailsForElement:(id)arg1;
-(id)authFailedErrorDetailsForElement:(id)arg1;
-(id)badVersionErrorDetailsForElement:(id)arg1;
-(id)badHostErrorDetailsForElement:(id)arg1;
-(id)badTimestampErrorDetailsForElement:(id)arg1;
-(void)socket:(id)arg1 didConnectToHost:(id)arg2 port:(unsigned short)arg3;
-(void)socket:(id)arg1 didReadData:(id)arg2 withTag:(long)arg3;
-(void)socket:(id)arg1 didWriteDataWithTag:(long)arg2;
-(double)socket:(id)arg1 shouldTimeoutReadWithTag:(long)arg2 elapsed:(double)arg3 bytesDone:(unsigned)arg4;
-(double)socket:(id)arg1 shouldTimeoutWriteWithTag:(long)arg2 elapsed:(double)arg3 bytesDone:(unsigned)arg4;
-(void)socketDidDisconnect:(id)arg1 withError:(id)arg2;
-(void)dealloc;
-(void)setDelegate:(id)arg1;
-(void)disconnect;
-(void)startReading;
-(void)setConnectionCallback:(id)arg1;
-(void)readData:(id)arg1;
-(void)writeData:(id)arg1;
@end